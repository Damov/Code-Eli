diff -rupN qd-2.3.13-unpatched/autom4te.cache/output.0 qd-2.3.13-patched/autom4te.cache/output.0
--- qd-2.3.13-unpatched/autom4te.cache/output.0	2012-03-13 16:34:42.000000000 -0700
+++ qd-2.3.13-patched/autom4te.cache/output.0	2013-01-24 15:44:15.000000000 -0800
@@ -1,6 +1,6 @@
 @%:@! /bin/sh
 @%:@ Guess values for system-dependent variables and create Makefiles.
-@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.12.
+@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.13.
 @%:@
 @%:@ Report bugs to <yozo@cs.berkeley.edu>.
 @%:@ 
@@ -552,8 +552,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='qd'
 PACKAGE_TARNAME='qd'
-PACKAGE_VERSION='2.3.12'
-PACKAGE_STRING='qd 2.3.12'
+PACKAGE_VERSION='2.3.13'
+PACKAGE_STRING='qd 2.3.13'
 PACKAGE_BUGREPORT='yozo@cs.berkeley.edu'
 PACKAGE_URL=''
 
@@ -1279,7 +1279,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures qd 2.3.12 to adapt to many kinds of systems.
+\`configure' configures qd 2.3.13 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1349,7 +1349,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of qd 2.3.12:";;
+     short | recursive ) echo "Configuration of qd 2.3.13:";;
    esac
   cat <<\_ACEOF
 
@@ -1453,7 +1453,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-qd configure 2.3.12
+qd configure 2.3.13
 generated by GNU Autoconf 2.65
 
 Copyright (C) 2009 Free Software Foundation, Inc.
@@ -2046,7 +2046,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by qd $as_me 2.3.12, which was
+It was created by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   $ $0 $@
@@ -2878,7 +2878,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='qd'
- VERSION='2.3.12'
+ VERSION='2.3.13'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -8156,7 +8156,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_wri
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by qd $as_me 2.3.12, which was
+This file was extended by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -8222,7 +8222,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-qd config.status 2.3.12
+qd config.status 2.3.13
 configured by $0, generated by GNU Autoconf 2.65,
   with options \\"\$ac_cs_config\\"
 
diff -rupN qd-2.3.13-unpatched/autom4te.cache/output.1 qd-2.3.13-patched/autom4te.cache/output.1
--- qd-2.3.13-unpatched/autom4te.cache/output.1	2012-03-13 16:35:12.000000000 -0700
+++ qd-2.3.13-patched/autom4te.cache/output.1	2013-01-24 15:45:05.000000000 -0800
@@ -1,6 +1,6 @@
 @%:@! /bin/sh
 @%:@ Guess values for system-dependent variables and create Makefiles.
-@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.12.
+@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.13.
 @%:@
 @%:@ Report bugs to <yozo@cs.berkeley.edu>.
 @%:@ 
@@ -701,8 +701,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='qd'
 PACKAGE_TARNAME='qd'
-PACKAGE_VERSION='2.3.12'
-PACKAGE_STRING='qd 2.3.12'
+PACKAGE_VERSION='2.3.13'
+PACKAGE_STRING='qd 2.3.13'
 PACKAGE_BUGREPORT='yozo@cs.berkeley.edu'
 PACKAGE_URL=''
 
@@ -1450,7 +1450,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures qd 2.3.12 to adapt to many kinds of systems.
+\`configure' configures qd 2.3.13 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1520,7 +1520,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of qd 2.3.12:";;
+     short | recursive ) echo "Configuration of qd 2.3.13:";;
    esac
   cat <<\_ACEOF
 
@@ -1636,7 +1636,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-qd configure 2.3.12
+qd configure 2.3.13
 generated by GNU Autoconf 2.65
 
 Copyright (C) 2009 Free Software Foundation, Inc.
@@ -2335,7 +2335,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by qd $as_me 2.3.12, which was
+It was created by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   $ $0 $@
@@ -3168,7 +3168,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='qd'
- VERSION='2.3.12'
+ VERSION='2.3.13'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -20896,7 +20896,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_wri
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by qd $as_me 2.3.12, which was
+This file was extended by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -20962,7 +20962,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-qd config.status 2.3.12
+qd config.status 2.3.13
 configured by $0, generated by GNU Autoconf 2.65,
   with options \\"\$ac_cs_config\\"
 
diff -rupN qd-2.3.13-unpatched/autom4te.cache/output.2 qd-2.3.13-patched/autom4te.cache/output.2
--- qd-2.3.13-unpatched/autom4te.cache/output.2	2012-03-13 16:35:09.000000000 -0700
+++ qd-2.3.13-patched/autom4te.cache/output.2	2013-01-24 15:45:33.000000000 -0800
@@ -1,6 +1,6 @@
 @%:@! /bin/sh
 @%:@ Guess values for system-dependent variables and create Makefiles.
-@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.12.
+@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.13.
 @%:@
 @%:@ Report bugs to <yozo@cs.berkeley.edu>.
 @%:@ 
@@ -701,8 +701,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='qd'
 PACKAGE_TARNAME='qd'
-PACKAGE_VERSION='2.3.12'
-PACKAGE_STRING='qd 2.3.12'
+PACKAGE_VERSION='2.3.13'
+PACKAGE_STRING='qd 2.3.13'
 PACKAGE_BUGREPORT='yozo@cs.berkeley.edu'
 PACKAGE_URL=''
 
@@ -1450,7 +1450,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures qd 2.3.12 to adapt to many kinds of systems.
+\`configure' configures qd 2.3.13 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1520,7 +1520,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of qd 2.3.12:";;
+     short | recursive ) echo "Configuration of qd 2.3.13:";;
    esac
   cat <<\_ACEOF
 
@@ -1636,7 +1636,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-qd configure 2.3.12
+qd configure 2.3.13
 generated by GNU Autoconf 2.65
 
 Copyright (C) 2009 Free Software Foundation, Inc.
@@ -2335,7 +2335,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by qd $as_me 2.3.12, which was
+It was created by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   $ $0 $@
@@ -3168,7 +3168,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='qd'
- VERSION='2.3.12'
+ VERSION='2.3.13'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -20896,7 +20896,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_wri
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by qd $as_me 2.3.12, which was
+This file was extended by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -20962,7 +20962,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-qd config.status 2.3.12
+qd config.status 2.3.13
 configured by $0, generated by GNU Autoconf 2.65,
   with options \\"\$ac_cs_config\\"
 
diff -rupN qd-2.3.13-unpatched/autom4te.cache/output.3 qd-2.3.13-patched/autom4te.cache/output.3
--- qd-2.3.13-unpatched/autom4te.cache/output.3	2012-03-13 16:35:12.000000000 -0700
+++ qd-2.3.13-patched/autom4te.cache/output.3	2013-01-24 15:46:00.000000000 -0800
@@ -1,6 +1,6 @@
 @%:@! /bin/sh
 @%:@ Guess values for system-dependent variables and create Makefiles.
-@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.12.
+@%:@ Generated by GNU Autoconf 2.65 for qd 2.3.13.
 @%:@
 @%:@ Report bugs to <yozo@cs.berkeley.edu>.
 @%:@ 
@@ -701,8 +701,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='qd'
 PACKAGE_TARNAME='qd'
-PACKAGE_VERSION='2.3.12'
-PACKAGE_STRING='qd 2.3.12'
+PACKAGE_VERSION='2.3.13'
+PACKAGE_STRING='qd 2.3.13'
 PACKAGE_BUGREPORT='yozo@cs.berkeley.edu'
 PACKAGE_URL=''
 
@@ -1450,7 +1450,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures qd 2.3.12 to adapt to many kinds of systems.
+\`configure' configures qd 2.3.13 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1520,7 +1520,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of qd 2.3.12:";;
+     short | recursive ) echo "Configuration of qd 2.3.13:";;
    esac
   cat <<\_ACEOF
 
@@ -1636,7 +1636,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-qd configure 2.3.12
+qd configure 2.3.13
 generated by GNU Autoconf 2.65
 
 Copyright (C) 2009 Free Software Foundation, Inc.
@@ -2335,7 +2335,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by qd $as_me 2.3.12, which was
+It was created by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   $ $0 $@
@@ -3168,7 +3168,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='qd'
- VERSION='2.3.12'
+ VERSION='2.3.13'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -20896,7 +20896,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_wri
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by qd $as_me 2.3.12, which was
+This file was extended by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -20962,7 +20962,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-qd config.status 2.3.12
+qd config.status 2.3.13
 configured by $0, generated by GNU Autoconf 2.65,
   with options \\"\$ac_cs_config\\"
 
diff -rupN qd-2.3.13-unpatched/autom4te.cache/traces.1 qd-2.3.13-patched/autom4te.cache/traces.1
--- qd-2.3.13-unpatched/autom4te.cache/traces.1	2012-03-13 16:35:12.000000000 -0700
+++ qd-2.3.13-patched/autom4te.cache/traces.1	2013-01-24 15:46:15.000000000 -0800
@@ -13,7 +13,7 @@ m4trace:aclocal.m4:975: -1- m4_include([
 m4trace:aclocal.m4:976: -1- m4_include([m4/ltsugar.m4])
 m4trace:aclocal.m4:977: -1- m4_include([m4/ltversion.m4])
 m4trace:aclocal.m4:978: -1- m4_include([m4/lt~obsolete.m4])
-m4trace:configure.ac:5: -1- AC_INIT([qd], [2.3.12], [yozo@cs.berkeley.edu])
+m4trace:configure.ac:5: -1- AC_INIT([qd], [2.3.13], [yozo@cs.berkeley.edu])
 m4trace:configure.ac:5: -1- m4_pattern_forbid([^_?A[CHUM]_])
 m4trace:configure.ac:5: -1- m4_pattern_forbid([_AC_])
 m4trace:configure.ac:5: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
diff -rupN qd-2.3.13-unpatched/configure qd-2.3.13-patched/configure
--- qd-2.3.13-unpatched/configure	2012-03-13 16:35:13.000000000 -0700
+++ qd-2.3.13-patched/configure	2013-01-24 15:50:28.000000000 -0800
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.65 for qd 2.3.12.
+# Generated by GNU Autoconf 2.65 for qd 2.3.13.
 #
 # Report bugs to <yozo@cs.berkeley.edu>.
 #
@@ -701,8 +701,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='qd'
 PACKAGE_TARNAME='qd'
-PACKAGE_VERSION='2.3.12'
-PACKAGE_STRING='qd 2.3.12'
+PACKAGE_VERSION='2.3.13'
+PACKAGE_STRING='qd 2.3.13'
 PACKAGE_BUGREPORT='yozo@cs.berkeley.edu'
 PACKAGE_URL=''
 
@@ -1450,7 +1450,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures qd 2.3.12 to adapt to many kinds of systems.
+\`configure' configures qd 2.3.13 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1520,7 +1520,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of qd 2.3.12:";;
+     short | recursive ) echo "Configuration of qd 2.3.13:";;
    esac
   cat <<\_ACEOF
 
@@ -1636,7 +1636,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-qd configure 2.3.12
+qd configure 2.3.13
 generated by GNU Autoconf 2.65
 
 Copyright (C) 2009 Free Software Foundation, Inc.
@@ -2335,7 +2335,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by qd $as_me 2.3.12, which was
+It was created by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   $ $0 $@
@@ -2688,7 +2688,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu
 PACKAGE="qd"
 MAJOR_VERSION="2"
 MINOR_VERSION="3"
-PATCH_VERSION="12"
+PATCH_VERSION="13"
 VERSION=$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION
 
 cat >>confdefs.h <<_ACEOF
@@ -3168,7 +3168,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='qd'
- VERSION='2.3.12'
+ VERSION='2.3.13'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -20896,7 +20896,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_wri
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by qd $as_me 2.3.12, which was
+This file was extended by qd $as_me 2.3.13, which was
 generated by GNU Autoconf 2.65.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -20962,7 +20962,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-qd config.status 2.3.12
+qd config.status 2.3.13
 configured by $0, generated by GNU Autoconf 2.65,
   with options \\"\$ac_cs_config\\"
 
diff -rupN qd-2.3.13-unpatched/include/qd/dd_inline.h qd-2.3.13-patched/include/qd/dd_inline.h
--- qd-2.3.13-unpatched/include/qd/dd_inline.h	2009-05-11 10:45:05.000000000 -0700
+++ qd-2.3.13-patched/include/qd/dd_inline.h	2013-01-24 15:42:02.000000000 -0800
@@ -77,7 +77,6 @@ inline dd_real operator+(double a, const
   return (b + a);
 }
 
-
 /*********** Self-Additions ************/
 /* double-double += double */
 inline dd_real &dd_real::operator+=(double a) {
@@ -109,6 +108,11 @@ inline dd_real &dd_real::operator+=(cons
 #endif
 }
 
+/*********** Unary Plus ***********/
+inline const dd_real & dd_real::operator+() const {
+  return (*this);
+}
+
 /*********** Subtractions ************/
 /* double-double = double - double */
 inline dd_real dd_real::sub(double a, double b) {
@@ -235,6 +239,7 @@ inline dd_real operator*(double a, const
   return (b * a);
 }
 
+
 /*********** Self-Multiplications ************/
 /* double-double *= double */
 inline dd_real &dd_real::operator*=(double a) {
diff -rupN qd-2.3.13-unpatched/include/qd/dd_real.h qd-2.3.13-patched/include/qd/dd_real.h
--- qd-2.3.13-unpatched/include/qd/dd_real.h	2009-12-28 19:18:53.000000000 -0800
+++ qd-2.3.13-patched/include/qd/dd_real.h	2013-01-24 15:42:02.000000000 -0800
@@ -9,14 +9,14 @@
  *
  * Double-double precision (>= 106-bit significand) floating point
  * arithmetic package based on David Bailey's Fortran-90 double-double
- * package, with some changes. See  
+ * package, with some changes. See
  *
  *   http://www.nersc.gov/~dhbailey/mpdist/mpdist.html
- *   
+ *
  * for the original Fortran-90 version.
  *
  * Overall structure is similar to that of Keith Brigg's C++ double-double
- * package.  See  
+ * package.  See
  *
  *   http://www-epidem.plansci.cam.ac.uk/~kbriggs/doubledouble.html
  *
@@ -75,6 +75,11 @@ struct QD_API dd_real {
     x[0] = d[0]; x[1] = d[1];
   }
 
+  operator int () const
+  {
+    return static_cast<int>(x[0]);
+  }
+
   static void error(const char *msg);
 
   double _hi() const { return x[0]; }
@@ -114,6 +119,7 @@ struct QD_API dd_real {
   dd_real &operator-=(const dd_real &a);
 
   dd_real operator-() const;
+  const dd_real & operator+() const;
 
   static dd_real mul(double a, double b);
 
@@ -123,7 +129,7 @@ struct QD_API dd_real {
   static dd_real div(double a, double b);
   static dd_real sloppy_div(const dd_real &a, const dd_real &b);
   static dd_real accurate_div(const dd_real &a, const dd_real &b);
-  
+
   dd_real &operator/=(double a);
   dd_real &operator/=(const dd_real &a);
 
@@ -134,7 +140,7 @@ struct QD_API dd_real {
   static dd_real sqr(double d);
 
   static dd_real sqrt(double a);
-  
+
   bool is_zero() const;
   bool is_one() const;
   bool is_positive() const;
@@ -143,16 +149,16 @@ struct QD_API dd_real {
   static dd_real rand(void);
 
   void to_digits(char *s, int &expn, int precision = _ndigits) const;
-  void write(char *s, int len, int precision = _ndigits, 
+  void write(char *s, int len, int precision = _ndigits,
       bool showpos = false, bool uppercase = false) const;
-  std::string to_string(int precision = _ndigits, int width = 0, 
-      std::ios_base::fmtflags fmt = static_cast<std::ios_base::fmtflags>(0), 
+  std::string to_string(int precision = _ndigits, int width = 0,
+      std::ios_base::fmtflags fmt = static_cast<std::ios_base::fmtflags>(0),
       bool showpos = false, bool uppercase = false, char fill = ' ') const;
   int read(const char *s, dd_real &a);
 
   /* Debugging Methods */
   void dump(const std::string &name = "", std::ostream &os = std::cerr) const;
-  void dump_bits(const std::string &name = "", 
+  void dump_bits(const std::string &name = "",
                  std::ostream &os = std::cerr) const;
 
   static dd_real debug_rand();
@@ -176,7 +182,7 @@ QD_API dd_real ddrand(void);
 QD_API dd_real sqrt(const dd_real &a);
 
 QD_API dd_real polyeval(const dd_real *c, int n, const dd_real &x);
-QD_API dd_real polyroot(const dd_real *c, int n, 
+QD_API dd_real polyroot(const dd_real *c, int n,
     const dd_real &x0, int max_iter = 32, double thresh = 0.0);
 
 QD_API inline bool isnan(const dd_real &a) { return a.isnan(); }
@@ -189,18 +195,42 @@ QD_API dd_real mul_pwr2(const dd_real &d
 QD_API dd_real operator+(const dd_real &a, double b);
 QD_API dd_real operator+(double a, const dd_real &b);
 QD_API dd_real operator+(const dd_real &a, const dd_real &b);
+QD_API dd_real operator+(int a, const dd_real &b);
+QD_API dd_real operator+(const dd_real &b, int a);
+QD_API dd_real operator+(long int a, const dd_real &b);
+QD_API dd_real operator+(const dd_real &b, long int a);
+QD_API dd_real operator+(size_t a, const dd_real &b);
+QD_API dd_real operator+(const dd_real &b, size_t a);
 
 QD_API dd_real operator-(const dd_real &a, double b);
 QD_API dd_real operator-(double a, const dd_real &b);
 QD_API dd_real operator-(const dd_real &a, const dd_real &b);
+QD_API dd_real operator-(int a, const dd_real &b);
+QD_API dd_real operator-(const dd_real &b, int a);
+QD_API dd_real operator-(long int a, const dd_real &b);
+QD_API dd_real operator-(const dd_real &b, long int a);
+QD_API dd_real operator-(size_t a, const dd_real &b);
+QD_API dd_real operator-(const dd_real &b, size_t a);
 
 QD_API dd_real operator*(const dd_real &a, double b);
 QD_API dd_real operator*(double a, const dd_real &b);
 QD_API dd_real operator*(const dd_real &a, const dd_real &b);
+QD_API dd_real operator*(int a, const dd_real &b);
+QD_API dd_real operator*(const dd_real &b, int a);
+QD_API dd_real operator*(long int a, const dd_real &b);
+QD_API dd_real operator*(const dd_real &b, long int a);
+QD_API dd_real operator*(size_t a, const dd_real &b);
+QD_API dd_real operator*(const dd_real &b, size_t a);
 
 QD_API dd_real operator/(const dd_real &a, double b);
 QD_API dd_real operator/(double a, const dd_real &b);
 QD_API dd_real operator/(const dd_real &a, const dd_real &b);
+QD_API dd_real operator/(int a, const dd_real &b);
+QD_API dd_real operator/(const dd_real &b, int a);
+QD_API dd_real operator/(long int a, const dd_real &b);
+QD_API dd_real operator/(const dd_real &b, long int a);
+QD_API dd_real operator/(size_t a, const dd_real &b);
+QD_API dd_real operator/(const dd_real &b, size_t a);
 
 QD_API dd_real inv(const dd_real &a);
 
@@ -219,26 +249,38 @@ QD_API dd_real nroot(const dd_real &a, i
 QD_API bool operator==(const dd_real &a, double b);
 QD_API bool operator==(double a, const dd_real &b);
 QD_API bool operator==(const dd_real &a, const dd_real &b);
+QD_API bool operator==(int a, const dd_real &b);
+QD_API bool operator==(const dd_real &b, int a);
 
 QD_API bool operator<=(const dd_real &a, double b);
 QD_API bool operator<=(double a, const dd_real &b);
 QD_API bool operator<=(const dd_real &a, const dd_real &b);
+QD_API bool operator<=(int a, const dd_real &b);
+QD_API bool operator<=(const dd_real &b, int a);
 
 QD_API bool operator>=(const dd_real &a, double b);
 QD_API bool operator>=(double a, const dd_real &b);
 QD_API bool operator>=(const dd_real &a, const dd_real &b);
+QD_API bool operator>=(int a, const dd_real &b);
+QD_API bool operator>=(const dd_real &b, int a);
 
 QD_API bool operator<(const dd_real &a, double b);
 QD_API bool operator<(double a, const dd_real &b);
 QD_API bool operator<(const dd_real &a, const dd_real &b);
+QD_API bool operator<(int a, const dd_real &b);
+QD_API bool operator<(const dd_real &b, int a);
 
 QD_API bool operator>(const dd_real &a, double b);
 QD_API bool operator>(double a, const dd_real &b);
 QD_API bool operator>(const dd_real &a, const dd_real &b);
+QD_API bool operator>(int a, const dd_real &b);
+QD_API bool operator>(const dd_real &b, int a);
 
 QD_API bool operator!=(const dd_real &a, double b);
 QD_API bool operator!=(double a, const dd_real &b);
 QD_API bool operator!=(const dd_real &a, const dd_real &b);
+QD_API bool operator!=(int a, const dd_real &b);
+QD_API bool operator!=(const dd_real &b, int a);
 
 QD_API dd_real nint(const dd_real &a);
 QD_API dd_real floor(const dd_real &a);
@@ -268,13 +310,15 @@ QD_API dd_real atan2(const dd_real &y, c
 QD_API dd_real sinh(const dd_real &a);
 QD_API dd_real cosh(const dd_real &a);
 QD_API dd_real tanh(const dd_real &a);
-QD_API void sincosh(const dd_real &a, 
+QD_API void sincosh(const dd_real &a,
                       dd_real &sinh_a, dd_real &cosh_a);
 
 QD_API dd_real asinh(const dd_real &a);
 QD_API dd_real acosh(const dd_real &a);
 QD_API dd_real atanh(const dd_real &a);
 
+QD_API dd_real cbrt(const dd_real &a);
+
 QD_API dd_real fabs(const dd_real &a);
 QD_API dd_real abs(const dd_real &a);   /* same as fabs */
 
@@ -286,5 +330,29 @@ QD_API std::istream& operator>>(std::ist
 #include <qd/dd_inline.h>
 #endif
 
+namespace std {
+  using ::abs;
+  using ::fabs;
+  using ::ceil;
+  using ::floor;
+  using ::fmod;
+  using ::sqrt;
+  using ::pow;
+  using ::exp;
+  using ::log;
+  using ::log10;
+  using ::sin;
+  using ::cos;
+  using ::tan;
+  using ::asin;
+  using ::acos;
+  using ::atan;
+  using ::atan2;
+  using ::sinh;
+  using ::cosh;
+  using ::tanh;
+  using ::cbrt;
+}
+
 #endif /* _QD_DD_REAL_H */
 
diff -rupN qd-2.3.13-unpatched/include/qd/qd_inline.h qd-2.3.13-patched/include/qd/qd_inline.h
--- qd-2.3.13-unpatched/include/qd/qd_inline.h	2009-12-28 19:03:35.000000000 -0800
+++ qd-2.3.13-patched/include/qd/qd_inline.h	2013-01-24 15:42:02.000000000 -0800
@@ -435,6 +435,11 @@ inline qd_real &qd_real::operator+=(cons
   return *this;
 }
 
+/*********** Unary Plus ***********/
+inline const qd_real & qd_real::operator+() const {
+  return (*this);
+}
+
 /********** Unary Minus **********/
 inline qd_real qd_real::operator-() const {
   return qd_real(-x[0], -x[1], -x[2], -x[3]);
@@ -842,7 +847,6 @@ inline bool operator==(const qd_real &a,
           a[2] == b[2] && a[3] == b[3]);
 }
 
-
 /********** Less-Than Comparison ***********/
 inline bool operator<(const qd_real &a, double b) {
   return (a[0] < b || (a[0] == b && a[1] < 0.0));
@@ -895,7 +899,6 @@ inline bool operator>(const qd_real &a, 
                                               (a[2] == b[2] && a[3] > b[3]))))));
 }
 
-
 /********** Less-Than-Or-Equal-To Comparison **********/
 inline bool operator<=(const qd_real &a, double b) {
   return (a[0] < b || (a[0] == b && a[1] <= 0.0));
@@ -948,8 +951,6 @@ inline bool operator>=(const qd_real &a,
                                               (a[2] == b[2] && a[3] >= b[3]))))));
 }
 
-
-
 /********** Not-Equal-To Comparison **********/
 inline bool operator!=(const qd_real &a, double b) {
   return !(a == b);
@@ -972,7 +973,6 @@ inline bool operator!=(const qd_real &a,
 }
 
 
-
 inline qd_real aint(const qd_real &a) {
   return (a[0] >= 0) ? floor(a) : ceil(a);
 }
diff -rupN qd-2.3.13-unpatched/include/qd/qd_real.h qd-2.3.13-patched/include/qd/qd_real.h
--- qd-2.3.13-unpatched/include/qd/qd_real.h	2009-05-11 10:45:05.000000000 -0700
+++ qd-2.3.13-patched/include/qd/qd_real.h	2013-01-24 15:42:02.000000000 -0800
@@ -9,8 +9,8 @@
  *
  * Quad-double precision (>= 212-bit significand) floating point arithmetic
  * package, written in ANSI C++, taking full advantage of operator overloading.
- * Uses similar techniques as that of David Bailey's double-double package 
- * and that of Jonathan Shewchuk's adaptive precision floating point 
+ * Uses similar techniques as that of David Bailey's double-double package
+ * and that of Jonathan Shewchuk's adaptive precision floating point
  * arithmetic package.  See
  *
  *   http://www.nersc.gov/~dhbailey/mpdist/mpdist.html
@@ -68,6 +68,11 @@ struct QD_API qd_real {
   qd_real(double d);
   qd_real(int i);
 
+  operator int () const
+  {
+    return static_cast<int>(x[0]);
+  }
+
   double operator[](int i) const;
   double &operator[](int i);
 
@@ -107,6 +112,7 @@ struct QD_API qd_real {
   qd_real operator^(int n) const;
 
   qd_real operator-() const;
+  const qd_real & operator+() const;
 
   qd_real &operator=(double a);
   qd_real &operator=(const dd_real &a);
@@ -120,16 +126,16 @@ struct QD_API qd_real {
   static qd_real rand(void);
 
   void to_digits(char *s, int &expn, int precision = _ndigits) const;
-  void write(char *s, int len, int precision = _ndigits, 
+  void write(char *s, int len, int precision = _ndigits,
       bool showpos = false, bool uppercase = false) const;
-  std::string to_string(int precision = _ndigits, int width = 0, 
-      std::ios_base::fmtflags fmt = static_cast<std::ios_base::fmtflags>(0), 
+  std::string to_string(int precision = _ndigits, int width = 0,
+      std::ios_base::fmtflags fmt = static_cast<std::ios_base::fmtflags>(0),
       bool showpos = false, bool uppercase = false, char fill = ' ') const;
   static int read(const char *s, qd_real &a);
 
   /* Debugging methods */
   void dump(const std::string &name = "", std::ostream &os = std::cerr) const;
-  void dump_bits(const std::string &name = "", 
+  void dump_bits(const std::string &name = "",
                  std::ostream &os = std::cerr) const;
 
   static qd_real debug_rand();
@@ -150,7 +156,7 @@ namespace std {
 }
 
 QD_API qd_real polyeval(const qd_real *c, int n, const qd_real &x);
-QD_API qd_real polyroot(const qd_real *c, int n, 
+QD_API qd_real polyroot(const qd_real *c, int n,
     const qd_real &x0, int max_iter = 64, double thresh = 0.0);
 
 QD_API qd_real qdrand(void);
@@ -169,24 +175,48 @@ QD_API qd_real operator+(const dd_real &
 QD_API qd_real operator+(const qd_real &a, const dd_real &b);
 QD_API qd_real operator+(const qd_real &a, double b);
 QD_API qd_real operator+(double a, const qd_real &b);
+QD_API qd_real operator+(int a, const qd_real &b);
+QD_API qd_real operator+(const qd_real &a, int b);
+QD_API qd_real operator+(long int a, const qd_real &b);
+QD_API qd_real operator+(const qd_real &a, long int b);
+QD_API qd_real operator+(size_t a, const qd_real &b);
+QD_API qd_real operator+(const qd_real &a, size_t b);
 
 QD_API qd_real operator-(const qd_real &a, const qd_real &b);
 QD_API qd_real operator-(const dd_real &a, const qd_real &b);
 QD_API qd_real operator-(const qd_real &a, const dd_real &b);
 QD_API qd_real operator-(const qd_real &a, double b);
 QD_API qd_real operator-(double a, const qd_real &b);
+QD_API qd_real operator-(int a, const qd_real &b);
+QD_API qd_real operator-(const qd_real &a, int b);
+QD_API qd_real operator-(long int a, const qd_real &b);
+QD_API qd_real operator-(const qd_real &a, long int b);
+QD_API qd_real operator-(size_t a, const qd_real &b);
+QD_API qd_real operator-(const qd_real &a, size_t b);
 
 QD_API qd_real operator*(const qd_real &a, const qd_real &b);
 QD_API qd_real operator*(const dd_real &a, const qd_real &b);
 QD_API qd_real operator*(const qd_real &a, const dd_real &b);
 QD_API qd_real operator*(const qd_real &a, double b);
 QD_API qd_real operator*(double a, const qd_real &b);
+QD_API qd_real operator*(int a, const qd_real &b);
+QD_API qd_real operator*(const qd_real &a, int b);
+QD_API qd_real operator*(long int a, const qd_real &b);
+QD_API qd_real operator*(const qd_real &a, long int b);
+QD_API qd_real operator*(size_t a, const qd_real &b);
+QD_API qd_real operator*(const qd_real &a, size_t b);
 
 QD_API qd_real operator/(const qd_real &a, const qd_real &b);
 QD_API qd_real operator/(const dd_real &a, const qd_real &b);
 QD_API qd_real operator/(const qd_real &a, const dd_real &b);
 QD_API qd_real operator/(const qd_real &a, double b);
 QD_API qd_real operator/(double a, const qd_real &b);
+QD_API qd_real operator/(int a, const qd_real &b);
+QD_API qd_real operator/(const qd_real &a, int b);
+QD_API qd_real operator/(long int a, const qd_real &b);
+QD_API qd_real operator/(const qd_real &a, long int b);
+QD_API qd_real operator/(size_t a, const qd_real &b);
+QD_API qd_real operator/(const qd_real &a, size_t b);
 
 QD_API qd_real sqr(const qd_real &a);
 QD_API qd_real sqrt(const qd_real &a);
@@ -209,36 +239,48 @@ QD_API bool operator==(const qd_real &a,
 QD_API bool operator==(const dd_real &a, const qd_real &b);
 QD_API bool operator==(double a, const qd_real &b);
 QD_API bool operator==(const qd_real &a, double b);
+QD_API bool operator==(int a, const qd_real &b);
+QD_API bool operator==(const qd_real &a, int b);
 
 QD_API bool operator<(const qd_real &a, const qd_real &b);
 QD_API bool operator<(const qd_real &a, const dd_real &b);
 QD_API bool operator<(const dd_real &a, const qd_real &b);
 QD_API bool operator<(double a, const qd_real &b);
 QD_API bool operator<(const qd_real &a, double b);
+QD_API bool operator<(int a, const qd_real &b);
+QD_API bool operator<(const qd_real &a, int b);
 
 QD_API bool operator>(const qd_real &a, const qd_real &b);
 QD_API bool operator>(const qd_real &a, const dd_real &b);
 QD_API bool operator>(const dd_real &a, const qd_real &b);
 QD_API bool operator>(double a, const qd_real &b);
 QD_API bool operator>(const qd_real &a, double b);
+QD_API bool operator>(int a, const qd_real &b);
+QD_API bool operator>(const qd_real &a, int b);
 
 QD_API bool operator<=(const qd_real &a, const qd_real &b);
 QD_API bool operator<=(const qd_real &a, const dd_real &b);
 QD_API bool operator<=(const dd_real &a, const qd_real &b);
 QD_API bool operator<=(double a, const qd_real &b);
 QD_API bool operator<=(const qd_real &a, double b);
+QD_API bool operator<=(int a, const qd_real &b);
+QD_API bool operator<=(const qd_real &a, int b);
 
 QD_API bool operator>=(const qd_real &a, const qd_real &b);
 QD_API bool operator>=(const qd_real &a, const dd_real &b);
 QD_API bool operator>=(const dd_real &a, const qd_real &b);
 QD_API bool operator>=(double a, const qd_real &b);
 QD_API bool operator>=(const qd_real &a, double b);
+QD_API bool operator>=(int a, const qd_real &b);
+QD_API bool operator>=(const qd_real &a, int b);
 
 QD_API bool operator!=(const qd_real &a, const qd_real &b);
 QD_API bool operator!=(const qd_real &a, const dd_real &b);
 QD_API bool operator!=(const dd_real &a, const qd_real &b);
 QD_API bool operator!=(double a, const qd_real &b);
 QD_API bool operator!=(const qd_real &a, double b);
+QD_API bool operator!=(int a, const qd_real &b);
+QD_API bool operator!=(const qd_real &a, int b);
 
 QD_API qd_real fabs(const qd_real &a);
 QD_API qd_real abs(const qd_real &a);    /* same as fabs */
@@ -276,6 +318,8 @@ QD_API qd_real atanh(const qd_real &a);
 
 QD_API qd_real qdrand(void);
 
+QD_API qd_real cbrt(const qd_real &a);
+
 QD_API qd_real max(const qd_real &a, const qd_real &b);
 QD_API qd_real max(const qd_real &a, const qd_real &b, const qd_real &c);
 QD_API qd_real min(const qd_real &a, const qd_real &b);
@@ -289,5 +333,29 @@ QD_API std::istream &operator>>(std::ist
 #include <qd/qd_inline.h>
 #endif
 
+namespace std {
+  using ::abs;
+  using ::fabs;
+  using ::ceil;
+  using ::floor;
+  using ::fmod;
+  using ::sqrt;
+  using ::pow;
+  using ::exp;
+  using ::log;
+  using ::log10;
+  using ::sin;
+  using ::cos;
+  using ::tan;
+  using ::asin;
+  using ::acos;
+  using ::atan;
+  using ::atan2;
+  using ::sinh;
+  using ::cosh;
+  using ::tanh;
+  using ::cbrt;
+}
+
 #endif /* _QD_QD_REAL_H */
 
diff -rupN qd-2.3.13-unpatched/src/dd_real.cpp qd-2.3.13-patched/src/dd_real.cpp
--- qd-2.3.13-unpatched/src/dd_real.cpp	2011-07-29 15:55:54.000000000 -0700
+++ qd-2.3.13-patched/src/dd_real.cpp	2013-01-24 15:42:02.000000000 -0800
@@ -37,6 +37,62 @@ using std::ios_base;
 using std::string;
 using std::setw;
 
+/* int + double-double */
+dd_real operator+(int i, const dd_real &r) {return operator+(static_cast<double>(i), r);}
+dd_real operator+(long int i, const dd_real &r) {return operator+(static_cast<double>(i), r);}
+dd_real operator+(size_t i, const dd_real &r) {return operator+(static_cast<double>(i), r);}
+dd_real operator+(const dd_real &r, int i) {return operator+(r, static_cast<double>(i));}
+dd_real operator+(const dd_real &r, long int i) {return operator+(r, static_cast<double>(i));}
+dd_real operator+(const dd_real &r, size_t i) {return operator+(r, static_cast<double>(i));}
+
+/* int - double-double */
+dd_real operator-(int i, const dd_real &r) {return operator-(static_cast<double>(i), r);}
+dd_real operator-(long int i, const dd_real &r) {return operator-(static_cast<double>(i), r);}
+dd_real operator-(size_t i, const dd_real &r) {return operator-(static_cast<double>(i), r);}
+dd_real operator-(const dd_real &r, int i) {return operator-(r, static_cast<double>(i));}
+dd_real operator-(const dd_real &r, long int i) {return operator-(r, static_cast<double>(i));}
+dd_real operator-(const dd_real &r, size_t i) {return operator-(r, static_cast<double>(i));}
+
+/* int * double-double */
+dd_real operator*(int i, const dd_real &r) {return operator*(static_cast<double>(i), r);}
+dd_real operator*(long int i, const dd_real &r) {return operator*(static_cast<double>(i), r);}
+dd_real operator*(size_t i, const dd_real &r) {return operator*(static_cast<double>(i), r);}
+dd_real operator*(const dd_real &r, int i) {return operator*(r, static_cast<double>(i));}
+dd_real operator*(const dd_real &r, long int i) {return operator*(r, static_cast<double>(i));}
+dd_real operator*(const dd_real &r, size_t i) {return operator*(r, static_cast<double>(i));}
+
+/* int / double-double */
+dd_real operator/(int i, const dd_real &r) {return operator/(static_cast<double>(i), r);}
+dd_real operator/(long int i, const dd_real &r) {return operator/(static_cast<double>(i), r);}
+dd_real operator/(size_t i, const dd_real &r) {return operator/(static_cast<double>(i), r);}
+dd_real operator/(const dd_real &r, int i) {return operator/(r, static_cast<double>(i));}
+dd_real operator/(const dd_real &r, long int i) {return operator/(r, static_cast<double>(i));}
+dd_real operator/(const dd_real &r, size_t i) {return operator/(r, static_cast<double>(i));}
+
+/* comparisons */
+bool operator==(int i, const dd_real &r) {return operator==(static_cast<double>(i), r);}
+bool operator==(const dd_real &r, int i) {return operator==(r, static_cast<double>(i));}
+  
+bool operator>(int i, const dd_real &r) {return operator>(static_cast<double>(i), r); }
+bool operator>(const dd_real &r, int i) {return operator>(r, static_cast<double>(i)); }
+
+bool operator<(int i, const dd_real &r) {return operator<(static_cast<double>(i), r); }
+bool operator<(const dd_real &r, int i) {return operator<(r, static_cast<double>(i)); }
+
+bool operator>=(int i, const dd_real &r) {return operator>=(static_cast<double>(i), r); }
+bool operator>=(const dd_real &r, int i) {return operator>=(r, static_cast<double>(i)); }
+
+bool operator<=(int i, const dd_real &r) {return operator<=(static_cast<double>(i), r); }
+bool operator<=(const dd_real &r, int i) {return operator<=(r, static_cast<double>(i)); }
+
+bool operator!=(int i, const dd_real &r) {return operator!=(static_cast<double>(i), r); }
+bool operator!=(const dd_real &r, int i) {return operator!=(r, static_cast<double>(i)); }
+
+dd_real cbrt(const dd_real &a) {
+  dd_real aa=std::abs(a), n=1./static_cast<dd_real>(3);
+  return (a<0 ? -1 : 1)*pow(aa, n);
+}
+ 
 /* This routine is called whenever a fatal error occurs. */
 void dd_real::error(const char *msg) { 
   if (msg) { cerr << "ERROR " << msg << endl; }
diff -rupN qd-2.3.13-unpatched/src/qd_real.cpp qd-2.3.13-patched/src/qd_real.cpp
--- qd-2.3.13-unpatched/src/qd_real.cpp	2011-07-29 16:45:47.000000000 -0700
+++ qd-2.3.13-patched/src/qd_real.cpp	2013-01-24 15:42:02.000000000 -0800
@@ -43,6 +43,57 @@ void qd_real::error(const char *msg) {
   if (msg) { cerr << "ERROR " << msg << endl; }
 }
 
+/* int + quad-double */
+qd_real operator+(int i, const qd_real &r) {return operator+(static_cast<double>(i), r);}
+qd_real operator+(long int i, const qd_real &r) {return operator+(static_cast<double>(i), r);}
+qd_real operator+(size_t i, const qd_real &r) {return operator+(static_cast<double>(i), r);}
+qd_real operator+(const qd_real &r, int i) {return operator+(r, static_cast<double>(i));}
+qd_real operator+(const qd_real &r, long int i) {return operator+(r, static_cast<double>(i));}
+qd_real operator+(const qd_real &r, size_t i) {return operator+(r, static_cast<double>(i));}
+
+/* int - quad-double */
+qd_real operator-(int i, const qd_real &r) {return operator-(static_cast<double>(i), r);}
+qd_real operator-(long int i, const qd_real &r) {return operator-(static_cast<double>(i), r);}
+qd_real operator-(size_t i, const qd_real &r) {return operator-(static_cast<double>(i), r);}
+qd_real operator-(const qd_real &r, int i) {return operator-(r, static_cast<double>(i));}
+qd_real operator-(const qd_real &r, long int i) {return operator-(r, static_cast<double>(i));}
+qd_real operator-(const qd_real &r, size_t i) {return operator-(r, static_cast<double>(i));}
+
+/* int * quad-double */
+qd_real operator*(int i, const qd_real &r) {return operator*(static_cast<double>(i), r);}
+qd_real operator*(long int i, const qd_real &r) {return operator*(static_cast<double>(i), r);}
+qd_real operator*(size_t i, const qd_real &r) {return operator*(static_cast<double>(i), r);}
+qd_real operator*(const qd_real &r, int i) {return operator*(r, static_cast<double>(i));}
+qd_real operator*(const qd_real &r, long int i) {return operator*(r, static_cast<double>(i));}
+qd_real operator*(const qd_real &r, size_t i) {return operator*(r, static_cast<double>(i));}
+
+/* int / quad-double */
+qd_real operator/(int i, const qd_real &r) {return operator/(static_cast<double>(i), r);}
+qd_real operator/(long int i, const qd_real &r) {return operator/(static_cast<double>(i), r);}
+qd_real operator/(size_t i, const qd_real &r) {return operator/(static_cast<double>(i), r);}
+qd_real operator/(const qd_real &r, int i) {return operator/(r, static_cast<double>(i));}
+qd_real operator/(const qd_real &r, long int i) {return operator/(r, static_cast<double>(i));}
+qd_real operator/(const qd_real &r, size_t i) {return operator/(r, static_cast<double>(i));}
+
+/* comparisons */
+bool operator==(int i, const qd_real &r) {return operator==(static_cast<double>(i), r);}
+bool operator==(const qd_real &r, int i) {return operator==(r, static_cast<double>(i));}
+  
+bool operator<(int i, const qd_real &r) {return operator<(static_cast<double>(i), r);}
+bool operator<(const qd_real &r, int i) {return operator<(r, static_cast<double>(i));}
+
+bool operator>(int i, const qd_real &r) {return operator>(static_cast<double>(i), r);}
+bool operator>(const qd_real &r, int i) {return operator>(r, static_cast<double>(i));}
+
+bool operator<=(int i, const qd_real &r) {return operator<=(static_cast<double>(i), r);}
+bool operator<=(const qd_real &r, int i) {return operator<=(r, static_cast<double>(i));}
+
+bool operator>=(const qd_real &r, int i) {return operator>=(r, static_cast<double>(i));}
+bool operator>=(int i, const qd_real &r) {return operator>=(static_cast<double>(i), r);}
+
+bool operator!=(int i, const qd_real &r) {return operator!=(static_cast<double>(i), r);}
+bool operator!=(const qd_real &r, int i) {return operator!=(r, static_cast<double>(i));}
+
 /********** Multiplications **********/
 
 qd_real nint(const qd_real &a) {
@@ -605,6 +656,11 @@ qd_real npwr(const qd_real &a, int n) {
   return pow(a, n);
 }
 
+qd_real cbrt(const qd_real &a) {
+  qd_real aa=std::abs(a), n=1./static_cast<qd_real>(3);
+  return (a<0 ? -1 : 1)*pow(aa, n);
+}
+
 /* Debugging routines */
 void qd_real::dump_bits(const string &name, std::ostream &os) const {
   string::size_type len = name.length();
diff -rupN qd-2.3.13-unpatched/tests/Makefile.in qd-2.3.13-patched/tests/Makefile.in
--- qd-2.3.13-unpatched/tests/Makefile.in	2012-03-13 16:35:14.000000000 -0700
+++ qd-2.3.13-patched/tests/Makefile.in	2013-01-24 15:42:02.000000000 -0800
@@ -35,9 +35,9 @@ POST_UNINSTALL = :
 build_triplet = @build@
 host_triplet = @host@
 TESTS = qd_test$(EXEEXT) pslq_test$(EXEEXT) c_test$(EXEEXT) \
-	$(am__EXEEXT_1)
+	$(am__EXEEXT_1) cpp_stdlib_test$(EXEEXT)
 check_PROGRAMS = qd_test$(EXEEXT) pslq_test$(EXEEXT) c_test$(EXEEXT) \
-	$(am__EXEEXT_1)
+	$(am__EXEEXT_1) cpp_stdlib_test$(EXEEXT)
 EXTRA_PROGRAMS = qd_timer$(EXEEXT) quadt_test$(EXEEXT) huge$(EXEEXT)
 @HAVE_FORTRAN_TRUE@am__append_1 = f_test
 @HAVE_FORTRAN_TRUE@am__append_2 = f_test
@@ -99,6 +99,10 @@ am_quadt_test_OBJECTS = quadt_test.$(OBJ
 quadt_test_OBJECTS = $(am_quadt_test_OBJECTS)
 quadt_test_LDADD = $(LDADD)
 quadt_test_DEPENDENCIES = $(top_builddir)/src/libqd.la
+am_cpp_stdlib_test_OBJECTS = cpp_stdlib_test.$(OBJEXT)
+cpp_stdlib_test_OBJECTS = $(am_cpp_stdlib_test_OBJECTS)
+cpp_stdlib_test_LDADD = $(LDADD)
+cpp_stdlib_test_DEPENDENCIES = $(top_builddir)/src/libqd.la
 DEFAULT_INCLUDES = 
 depcomp = $(SHELL) $(top_srcdir)/config/depcomp
 am__depfiles_maybe = depfiles
@@ -129,10 +133,10 @@ F77LINK = $(LIBTOOL) $(AM_LIBTOOLFLAGS) 
 	$(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
 SOURCES = $(c_test_SOURCES) $(f_test_SOURCES) $(huge_SOURCES) \
 	$(pslq_test_SOURCES) $(qd_test_SOURCES) $(qd_timer_SOURCES) \
-	$(quadt_test_SOURCES)
+	$(quadt_test_SOURCES) $(cpp_stdlib_test_SOURCES)
 DIST_SOURCES = $(c_test_SOURCES) $(am__f_test_SOURCES_DIST) \
 	$(huge_SOURCES) $(pslq_test_SOURCES) $(qd_test_SOURCES) \
-	$(qd_timer_SOURCES) $(quadt_test_SOURCES)
+	$(qd_timer_SOURCES) $(quadt_test_SOURCES) $(cpp_stdlib_test_SOURCES)
 DATA = $(dist_noinst_DATA)
 ETAGS = etags
 CTAGS = ctags
@@ -282,6 +286,7 @@ qd_test_SOURCES = qd_test.cpp
 pslq_test_SOURCES = pslq.h pslq_test.cpp tictoc.cpp tictoc.h
 qd_timer_SOURCES = qd_timer.cpp tictoc.cpp tictoc.h
 quadt_test_SOURCES = quadt_test.cpp tictoc.cpp quadt.h tictoc.h
+cpp_stdlib_test_SOURCES = cpp_stdlib_test.cpp
 huge_SOURCES = huge.cpp
 c_test_SOURCES = c_test.c
 c_test_LINK = $(CXXLINK)
@@ -349,6 +354,9 @@ qd_timer$(EXEEXT): $(qd_timer_OBJECTS) $
 quadt_test$(EXEEXT): $(quadt_test_OBJECTS) $(quadt_test_DEPENDENCIES) 
 	@rm -f quadt_test$(EXEEXT)
 	$(CXXLINK) $(quadt_test_OBJECTS) $(quadt_test_LDADD) $(LIBS)
+cpp_stdlib_test$(EXEEXT): $(cpp_stdlib_test_OBJECTS) $(cpp_stdlib_test_DEPENDENCIES) 
+	@rm -f cpp_stdlib_test$(EXEEXT)
+	$(CXXLINK) $(cpp_stdlib_test_OBJECTS) $(cpp_stdlib_test_LDADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
@@ -363,6 +371,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/qd_timer.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/quadt_test.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tictoc.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpp_stdlib_test.Po@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
diff -rupN qd-2.3.13-unpatched/tests/cpp_stdlib_test.cpp qd-2.3.13-patched/tests/cpp_stdlib_test.cpp
--- qd-2.3.13-unpatched/tests/cpp_stdlib_test.cpp	1969-12-31 16:00:00.000000000 -0800
+++ qd-2.3.13-patched/tests/cpp_stdlib_test.cpp	2013-01-24 15:42:02.000000000 -0800
@@ -0,0 +1,76 @@
+#include <cmath>
+#include <cstddef>
+
+#include <qd/dd_real.h>      // double-double
+#include <qd/qd_real.h>      // quad-double
+#include <qd/fpu.h>
+
+template <typename __data>
+void test_cmath()
+{
+ __data x(0.5), y(4), z;
+ int n(3);
+
+ z = std::abs(x);
+ z = std::fabs(x);
+ z = std::ceil(x);
+ z = std::floor(x);
+ z = std::fmod(x,y);
+ z = std::sqrt(x);
+ z = std::pow(x,y);
+ z = std::pow(x,n);
+ z = std::exp(x);
+ z = std::log(x);
+ z = std::log10(x);
+ z = std::sin(x);
+ z = std::cos(x);
+ z = std::tan(x);
+ z = std::asin(x);
+ z = std::acos(x);
+ z = std::atan(x);
+ z = std::atan2(x,y);
+ z = std::sinh(x);
+ z = std::cosh(x);
+ z = std::tanh(x);
+}
+
+template <typename __data>
+void test_casts()
+{
+ __data x(2.4);
+ int i;
+ unsigned int ui;
+ size_t st;
+ ptrdiff_t ptrdt;
+ short s;
+ unsigned short us;
+ char c;
+ unsigned char uc;
+
+ i=static_cast<int>(x);
+ ui=static_cast<unsigned int>(x);
+ st=static_cast<size_t>(x);
+ ptrdt=static_cast<ptrdiff_t>(x);
+ s=static_cast<short>(x);
+ us=static_cast<unsigned short>(x);
+ c=static_cast<char>(x);
+ uc=static_cast<unsigned char>(x);
+}
+
+int main(int argc, char *argv[])
+{
+ test_cmath<float>();
+ test_cmath<double>();
+ test_cmath<long double>();
+ test_cmath<dd_real>();
+ test_cmath<qd_real>();
+
+ test_casts<float>();
+ test_casts<double>();
+ test_casts<long double>();
+ test_casts<dd_real>();
+ test_casts<qd_real>();
+
+ return 0;
+}
+
