/*********************************************************************************
* Copyright (c) 2013 David D. Marshall <ddmarsha@calpoly.edu>
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*    David D. Marshall - initial code and implementation
********************************************************************************/

#ifndef code_eli_hpp
#define code_eli_hpp

#define ELI_VERSION_MAJOR @ELI_VERSION_MAJOR@
#define ELI_VERSION_MINOR @ELI_VERSION_MINOR@
#define ELI_VERSION_PATCH @ELI_VERSION_PATCH@
#define ELI_VERSION (ELI_VERSION_MAJOR * 1000 + ELI_VERSION_MINOR * 100 + ELI_VERSION_PATCH)
#define ELI_BUILD_TIMESTAMP @ELI_BUILD_DATE@.@ELI_BUILD_TIME@

#cmakedefine ELI_QD_FOUND
#ifdef ELI_QD_FOUND
# include <qd/dd_real.h>
# include <qd/qd_real.h>
# include <qd/fpu.h>

dd_real operator+(int i, const dd_real &r) {return operator+(static_cast<double>(i), r);}
dd_real operator+(long int i, const dd_real &r) {return operator+(static_cast<double>(i), r);}
dd_real operator+(size_t i, const dd_real &r) {return operator+(static_cast<double>(i), r);}
dd_real operator+(const dd_real &r, int i) {return operator+(r, static_cast<double>(i));}
dd_real operator+(const dd_real &r, long int i) {return operator+(r, static_cast<double>(i));}
dd_real operator+(const dd_real &r, size_t i) {return operator+(r, static_cast<double>(i));}
qd_real operator+(int i, const qd_real &r) {return operator+(static_cast<double>(i), r);}
qd_real operator+(long int i, const qd_real &r) {return operator+(static_cast<double>(i), r);}
qd_real operator+(size_t i, const qd_real &r) {return operator+(static_cast<double>(i), r);}
qd_real operator+(const qd_real &r, int i) {return operator+(r, static_cast<double>(i));}
qd_real operator+(const qd_real &r, long int i) {return operator+(r, static_cast<double>(i));}
qd_real operator+(const qd_real &r, size_t i) {return operator+(r, static_cast<double>(i));}

dd_real operator-(int i, const dd_real &r) {return operator-(static_cast<double>(i), r);}
dd_real operator-(long int i, const dd_real &r) {return operator-(static_cast<double>(i), r);}
dd_real operator-(size_t i, const dd_real &r) {return operator-(static_cast<double>(i), r);}
dd_real operator-(const dd_real &r, int i) {return operator-(r, static_cast<double>(i));}
dd_real operator-(const dd_real &r, long int i) {return operator-(r, static_cast<double>(i));}
dd_real operator-(const dd_real &r, size_t i) {return operator-(r, static_cast<double>(i));}
qd_real operator-(int i, const qd_real &r) {return operator-(static_cast<double>(i), r);}
qd_real operator-(long int i, const qd_real &r) {return operator-(static_cast<double>(i), r);}
qd_real operator-(size_t i, const qd_real &r) {return operator-(static_cast<double>(i), r);}
qd_real operator-(const qd_real &r, int i) {return operator-(r, static_cast<double>(i));}
qd_real operator-(const qd_real &r, long int i) {return operator-(r, static_cast<double>(i));}
qd_real operator-(const qd_real &r, size_t i) {return operator-(r, static_cast<double>(i));}

dd_real operator*(int i, const dd_real &r) {return operator*(static_cast<double>(i), r);}
dd_real operator*(long int i, const dd_real &r) {return operator*(static_cast<double>(i), r);}
dd_real operator*(size_t i, const dd_real &r) {return operator*(static_cast<double>(i), r);}
dd_real operator*(const dd_real &r, int i) {return operator*(r, static_cast<double>(i));}
dd_real operator*(const dd_real &r, long int i) {return operator*(r, static_cast<double>(i));}
dd_real operator*(const dd_real &r, size_t i) {return operator*(r, static_cast<double>(i));}
qd_real operator*(int i, const qd_real &r) {return operator*(static_cast<double>(i), r);}
qd_real operator*(long int i, const qd_real &r) {return operator*(static_cast<double>(i), r);}
qd_real operator*(size_t i, const qd_real &r) {return operator*(static_cast<double>(i), r);}
qd_real operator*(const qd_real &r, int i) {return operator*(r, static_cast<double>(i));}
qd_real operator*(const qd_real &r, long int i) {return operator*(r, static_cast<double>(i));}
qd_real operator*(const qd_real &r, size_t i) {return operator*(r, static_cast<double>(i));}

dd_real operator/(int i, const dd_real &r) {return operator/(static_cast<double>(i), r);}
dd_real operator/(long int i, const dd_real &r) {return operator/(static_cast<double>(i), r);}
dd_real operator/(size_t i, const dd_real &r) {return operator/(static_cast<double>(i), r);}
dd_real operator/(const dd_real &r, int i) {return operator/(r, static_cast<double>(i));}
dd_real operator/(const dd_real &r, long int i) {return operator/(r, static_cast<double>(i));}
dd_real operator/(const dd_real &r, size_t i) {return operator/(r, static_cast<double>(i));}
qd_real operator/(int i, const qd_real &r) {return operator/(static_cast<double>(i), r);}
qd_real operator/(long int i, const qd_real &r) {return operator/(static_cast<double>(i), r);}
qd_real operator/(size_t i, const qd_real &r) {return operator/(static_cast<double>(i), r);}
qd_real operator/(const qd_real &r, int i) {return operator/(r, static_cast<double>(i));}
qd_real operator/(const qd_real &r, long int i) {return operator/(r, static_cast<double>(i));}
qd_real operator/(const qd_real &r, size_t i) {return operator/(r, static_cast<double>(i));}

bool operator==(int i, const dd_real &r)
{
  return operator==(static_cast<double>(i), r);
}
bool operator==(const dd_real &r, int i)
{
  return operator==(r, static_cast<double>(i));
}
bool operator==(int i, const qd_real &r)
{
  return operator==(static_cast<double>(i), r);
}
bool operator==(const qd_real &r, int i)
{
  return operator==(r, static_cast<double>(i));
}

bool operator!=(int i, const dd_real &r)
{
  return operator!=(static_cast<double>(i), r);
}
bool operator!=(const dd_real &r, int i)
{
  return operator!=(r, static_cast<double>(i));
}
bool operator!=(int i, const qd_real &r)
{
  return operator!=(static_cast<double>(i), r);
}
bool operator!=(const qd_real &r, int i)
{
  return operator!=(r, static_cast<double>(i));
}

bool operator>(int i, const dd_real &r)
{
  return operator>(static_cast<double>(i), r);
}
bool operator>(const dd_real &r, int i)
{
  return operator>(r, static_cast<double>(i));
}
bool operator>(int i, const qd_real &r)
{
  return operator>(static_cast<double>(i), r);
}
bool operator>(const qd_real &r, int i)
{
  return operator>(r, static_cast<double>(i));
}

bool operator>=(int i, const dd_real &r)
{
  return operator>=(static_cast<double>(i), r);
}
bool operator>=(const dd_real &r, int i)
{
  return operator>=(r, static_cast<double>(i));
}
bool operator>=(const qd_real &r, int i)
{
  return operator>=(r, static_cast<double>(i));
}
bool operator>=(int i, const qd_real &r)
{
  return operator>=(static_cast<double>(i), r);
}

bool operator<(int i, const dd_real &r)
{
  return operator<(static_cast<double>(i), r);
}
bool operator<(const dd_real &r, int i)
{
  return operator<(r, static_cast<double>(i));
}
bool operator<(int i, const qd_real &r)
{
  return operator<(static_cast<double>(i), r);
}
bool operator<(const qd_real &r, int i)
{
  return operator<(r, static_cast<double>(i));
}

bool operator<=(int i, const dd_real &r)
{
  return operator<=(static_cast<double>(i), r);
}
bool operator<=(const dd_real &r, int i)
{
  return operator<=(r, static_cast<double>(i));
}
bool operator<=(int i, const qd_real &r)
{
  return operator<=(static_cast<double>(i), r);
}
bool operator<=(const qd_real &r, int i)
{
  return operator<=(r, static_cast<double>(i));
}


// add c++11 functions
dd_real cbrt(const dd_real &a)
{
  dd_real n(1./static_cast<dd_real>(3));
  return (a<0 ? -1 : 1)*pow(std::abs(a), n);
}
qd_real cbrt(const qd_real &a)
{
  qd_real n(1./static_cast<qd_real>(3));
  return (a<0 ? -1 : 1)*pow(std::abs(a), n);
}

namespace std
{
  using ::cbrt;
}

#endif

#endif
